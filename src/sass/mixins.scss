@mixin root-scroll($is-scroll : false) {
  html,
  body {
    @if $is-scroll {
      height: auto;
      overflow: visible;
    } @else {
      height: 100%;
      overflow: hidden;
    }
  }
}

/* border */
@mixin border($border-width: 1px, $border-color: map-get($base, border-color), $border-style: solid, $radius: null) {
  // 为边框位置提供定位参考
  position: relative;
  @if $border-width == null {
    $border-width: 0;
  }
  border-radius: $radius;
  &::after {
    // 用以解决边框layer遮盖内容
    position: absolute;
    top: 0;
    left: 0;
    z-index: 999;
    pointer-events: none;
    // fix当元素宽度出现小数时，边框可能显示不全的问题
    // overflow: hidden;
    content: "\0020";
    border-color: $border-color;
    border-style: $border-style;
    border-width: $border-width;
    // 适配dpr进行缩放
    @include responsive(retina1x) {
      width: 100%;
      height: 100%;
      @if $radius != null {
        border-radius: $radius;
      }
    }
    @include responsive(retina2x) {
      width: 200%;
      height: 200%;
      @include transform(scale(.5));
      @if $radius != null {
        border-radius: $radius * 2;
      }
    }
    @include responsive(retina3x) {
      width: 300%;
      height: 300%;
      @include transform(scale(.33333));
      @if $radius != null {
        border-radius: $radius * 3;
      }
    }
    @include transform-origin(0 0);
  }
}


// 适配
@mixin responsive($media) {
  @if not map-has-key($media-types, $media) {
    @warn "#{$media} is not a known media type. Using portrait instead.";
    $media: portrait;
  }
  @media #{map-get($media-types, $media)} {
    @content;
  }
}

// transform
@mixin transform($transform...) {
  @include _prefix(transform, $transform);
}

//transform-origin
@mixin transform-origin($transform-origin) {
  @include _prefix(transform-origin, $transform-origin);
}
